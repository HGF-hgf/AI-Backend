import google.generativeai as genai
import json
import re
import os
from base_prompt import get_prompt
from dotenv import load_dotenv

load_dotenv()

def fix_json_with_gemini(broken_json_string):
    """
    G·ªçi Gemini API ƒë·ªÉ s·ª≠a JSON b·ªã l·ªói
    """
    from dotenv import load_dotenv
    load_dotenv()
    api_key = os.environ.get("GEMINI_API_KEY")
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.0-flash')
    
    fix_prompt = f"""
    B·∫°n l√† chuy√™n gia s·ª≠a l·ªói JSON.

    T√¥i c√≥ m·ªôt ƒëo·∫°n JSON b·ªã l·ªói c√∫ ph√°p. H√£y s·ª≠a l·∫°i ƒë·ªÉ JSON tr·ªü n√™n h·ª£p l·ªá 100% theo chu·∫©n RFC 8259.

    ‚ö†Ô∏è M·ªôt s·ªë l·ªói th∆∞·ªùng g·∫∑p c√≥ th·ªÉ bao g·ªìm (nh∆∞ng kh√¥ng gi·ªõi h·∫°n):
    - D·∫•u ngo·∫∑c k√©p (") kh√¥ng ƒë∆∞·ª£c escape ƒë√∫ng
    - D·∫•u g·∫°ch ch√©o ng∆∞·ª£c (\\) d∆∞ ho·∫∑c thi·∫øu
    - Thi·∫øu d·∫•u ph·∫©y, thi·∫øu ho·∫∑c sai ngo·∫∑c

    üéØ Y√™u c·∫ßu:
    1. S·ª≠a t·∫•t c·∫£ l·ªói c√∫ ph√°p ƒë·ªÉ ƒëo·∫°n JSON h·ª£p l·ªá.
    2. Kh√¥ng thay ƒë·ªïi n·ªôi dung c√°c gi√° tr·ªã ‚Äì ch·ªâ ƒëi·ªÅu ch·ªânh c√∫ ph√°p.
    3. Escape c√°c d·∫•u ngo·∫∑c k√©p trong chu·ªói b·∫±ng `\"` ƒë√∫ng chu·∫©n.
    4. Tr·∫£ v·ªÅ duy nh·∫•t ƒëo·∫°n JSON ƒë√£ ƒë∆∞·ª£c s·ª≠a, b·ªçc trong th·∫ª code ```json```. Kh√¥ng th√™m l·ªùi gi·∫£i th√≠ch hay b√¨nh lu·∫≠n n√†o.

    üîß JSON b·ªã l·ªói:

    {broken_json_string}

"""
    
    try:
        response = model.generate_content(fix_prompt)
        part = response.candidates[0].content.parts[0]
        if hasattr(part, 'text') and isinstance(part.text, str):
            result_text = part.text
            print("Gemini fix JSON response:", result_text[:200] + "...")
            
            # T√¨m JSON trong response
            match = re.search(r"```json\s*([\s\S]+?)\s*```", result_text)
            if match:
                fixed_json_string = match.group(1)
            else:
                # Lo·∫°i b·ªè m·ªçi d·∫•u ``` v√† kho·∫£ng tr·∫Øng
                fixed_json_string = result_text.replace('```json', '').replace('```', '').strip()
            
            return fixed_json_string
        else:
            print("L·ªói khi fix JSON:", part.text if hasattr(part, 'text') else "No text")
            return None
    except Exception as e:
        print(f"Exception khi fix JSON: {e}")
        return None

def call_gemini_api(content):
    from dotenv import load_dotenv
    load_dotenv()
    api_key = os.environ.get("GEMINI_API_KEY")
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.0-flash')
    prompt = get_prompt(content)
    response = model.generate_content(prompt)
    try:
        part = response.candidates[0].content.parts[0]
        if hasattr(part, 'text') and isinstance(part.text, str):
            result_text = part.text
            print("Gemini text:", result_text)
            match = re.search(r"```json\s*([\s\S]+?)\s*```", result_text)
            if match:
                json_string = match.group(1)
            else:
                # Lo·∫°i b·ªè m·ªçi d·∫•u ``` v√† kho·∫£ng tr·∫Øng
                json_string = result_text.replace('```json', '').replace('```', '').strip()
            
            # Th·ª≠ parse JSON
            try:
                json_string = json_string.replace('‚Äú', '"').replace('‚Äù', '"').replace("‚Äô", "'")
                return json.loads(json_string)
            except json.JSONDecodeError as json_err:
                print(f"JSON Parse Error: {json_err}")
                print("ƒêang th·ª≠ s·ª≠a JSON b·∫±ng Gemini...")
                
                # Th·ª≠ fix JSON t·ªëi ƒëa 3 l·∫ßn
                current_json_string = json_string +"L·ªói ƒë∆∞·ª£c th√¥ng b√°o:" + str(json_err)
                max_fix_attempts = 3
                
                for fix_attempt in range(1, max_fix_attempts + 1):
                    print(f"üîß L·∫ßn fix th·ª© {fix_attempt}/{max_fix_attempts}")
                    
                    fixed_json_string = fix_json_with_gemini(current_json_string)
                    if fixed_json_string:
                        try:
                            json_string = json_string.replace('‚Äú', '"').replace('‚Äù', '"').replace("‚Äô", "'")
                            fixed_data = json.loads(fixed_json_string)
                            print(f"‚úÖ ƒê√£ s·ª≠a JSON th√†nh c√¥ng sau {fix_attempt} l·∫ßn th·ª≠!")
                            return fixed_data
                        except json.JSONDecodeError as fix_err:
                            print(f"‚ùå L·∫ßn fix {fix_attempt} v·∫´n l·ªói: {fix_err}")
                            if fix_attempt < max_fix_attempts:
                                print(f"üîÑ Th·ª≠ fix l·∫°i l·∫ßn {fix_attempt + 1}...")
                                current_json_string = fixed_json_string +"L·ªói ƒë∆∞·ª£c th√¥ng b√°o:"+ str(fix_err)  # D√πng JSON ƒë√£ fix l√†m input cho l·∫ßn ti·∫øp theo
                            else:
                                print(f"‚ùå ƒê√£ th·ª≠ fix {max_fix_attempts} l·∫ßn nh∆∞ng v·∫´n l·ªói")
                                return []
                    else:
                        print(f"‚ùå Kh√¥ng th·ªÉ s·ª≠a JSON ·ªü l·∫ßn {fix_attempt}")
                        return []
                
                return []
                    
        else:
            print("L·ªói. response", part.text if hasattr(part, 'text') else "No text")
            return []
    except Exception as e:
        print('Gemini response error:', response)
        print('Exception:', e)
        return []